Write-up for PA5
----------------
user: reddaly

I have written a fairly unsophisticated code generator for COOL.  It uses simple
and wasteful methods to generate MIPS instructions by passing over the AST in
a recursive descent manner.

The code generation takes place in a few steps and phases.  First, the data portion
of the program is filled in with the class name table (that maps class ids to COOL 
string constants), the prototype objects (blocks of data that are copied to initialize
any COOL object), and dispatch tables (tables for looking up the method given the
runtime type of a class).  In order to do this, the inheritance graph is first traversed
to assign indices to each class, later used to unique identify and index classes.  Most
of the procedures in this phase rely on list of attributes/methods in some canonical order,
which is computed determinisitically by each class (i.e. the attributes/methods of the Object class
are first, then the subclass' attributes/methods, all the way down the tree; overridden methods
replace parent entries in the dispatch table).

After the data portion is generated, the fun begins with procedural code generation.  There
are two primary concerns when translating the operational semantics: ensuring that the static 
environment is correctly represented, and correctly managing runtime memory.  In order to
generate code for identifiers, the static environment must be able to statically determine
the location in memory of attribute, let, and parameter bindings in addition to method bindings.
That is accomplished in the following manner:
 *attribute bindings are determined by using the canonical index of the attribute in the object
  record of the current class context.
 *parameter bindings are stored relative to the stack frame in a easily trackable manner since
 there can be no stack increment between the time they are bound and the method invocation.  Params
 are stored with the later arguments at the higher addresses, i.e. for a method m(p1, p2, p3) the
 frame will be (fp - 4): previous fp, (fp - 8): p3, (fp - 12): p2, (fp - 16): p3.
 *let bindings are stored relative to the current frame pointer.  This is accomplished by keeping
 track of the increments done to $sp by the code generator.  For example, consider the following
 COOL: class A { meth() : Int { let x : Int, y : Int in y } };
 	When the code generator generates code for meth(), it will require a certain number of bytes
 	on the stack to store the method frame, say 12 bytes.  Upon entering the let x, 4 more bytes
 	will be required to store the value of x.  Finally, 4 more bytes will be needed for the y
 	binding.  The bindings for x and y are thus (FP - 16) and (FP - 20) respectively.

Static method bindings are determined by directly pointing the class's method definition.
Dynamic method bindings are determined by looking up the method in the dispatch table of the
object's class.

Most of this functionality is implemented in the CompilationEnvironment class, which keeps
track of stack depth during code generation, if properly used.  It contains several utility
methods for help with code generation.

Object initialization is the other tricky part of implementation.  Each object has a label
called `classname_init' that corresponds to its initialization procedure.  After an object
has been copied into a new memory location with Object.copy and the prototype object pointer
in the $a0 register, this segment of code is called.  It will not modify $a0 and will
follow the semantics specified in the `new' operational semantics.  The init procedure
is fairly fairly tricky because it is has similar semantics to method definitions.
The prototype objects already provide the default values for each attribute.  Next,
the superclass's initialization procedure is called. Finally, Each
attribute initialization expression is evaluated in the order of declaration in
a static environment with the current class as its context class, and the newly
initialized object is returned.

Verifying the correctness of generated code.
================================================
In order to ensure that the generated code was correct, a number of informal steps were
taken: debugging, incremental testing, unit testing, and code coverage

Debugging was assisted by hard-coding comments into the generated assembly so it was
easier to make sense of generated code.  (This is also helpful for developers who wish
to review the generated instructions from a program, and is done in other compilers like SBCL.)
SPIM and XSPIM were not helpful for debugging the generated assmebly code except for
things like missing labels and global references.  Stepping through the program was
also tedious because of my programming environment.

Incremental testing is the only way to get a large software project like this working.
I implemented bits and pieces at a time, and verified that test programs returned
the expected integer value with each newly implemented feature.

Unit tsting was implemented as a ruby script later in development to ensure that
COOL programs outputted the expected values.  IO.out_* were used to output values.
Runtime outputs were compared to expected values and errors were reported for
conflicts.

The example.cl file attempts to cover all the procedural code generated by 


Comments
===============================================
