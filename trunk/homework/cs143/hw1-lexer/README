user: reddaly
Write-up for PA2
----------------

The design process was mainly bottom-up because of the relatively small task of lexing COOL.
Implementation happened in stages: research, writing the C++ and flex code, and testing. Research
mainly consisted of reading the FLex manual, COOL manual, cs143 newsgroup, and miscellaneous
other processes to learn about the task at hand.  Writing the C++ code for the parser
was relatively straightforward, aside from some documented features I had trouble exercising[1].
Flex rules were mostly implemented in the order discussed in the COOL manual and the companion
guide.  Testing happened continously while hacking the cool.flex file, but more formal "unit
testing" code was written after-the-fact.  Because of the code coverage in the unit tests, 
the hand comparisons with the provided lexer, and the simplicity of the implementation, the
lexer is believed to be up to snuff.

Establishing the correctness of the program:
    It is very difficult to establish with certainty the correct functioning of even the most
modern software.  Instead of rigorous, mathematical approach[2] I adopted a simple "unit testing"
technique whereby anticipated inputs and outputs are checked against what the program actually
produces.  Unit tests were not used to the extent that they are used in many live software systems,
however, though they are used to some extent.  Other test techniques were running both the 
my lexer and the provided lexer over input and `diff'ing the output files to ensure they
matched.  For the final program, I encountered trivial differences.[3]

Most of the test cases are for edge cases outlined in the guide to the first assignment.  Most
of the files I used for testing can be found in test/.  In addition, I also ran the lexer on
strange arbitrary input files and it generated reasonable error messages as specified in the
instructions.


Notes:
[1] In particular, the (?i:case-insensitive-string) notation gave "unrecognized rule" errors in the
installed version of flex.  Negative lookahead, which was probably not necessary, also
gave similar errors.

[2] See the subheading "Proving Correctness of LISP Programs" in McCarthy, John. "LISP--NOTES
ON ITS PAST AND FUTURE--1980." 1999.  <http://www-formal.stanford.edu/jmc/lisp20th.html>

Unfortunately, now Prof. McCarthy is emeritus and there is no Lisp course:
"...These [proof] methods (used informally) have been succesfully taught as part of
the LISP course at Stanford" (7).

[3] The error reporting of long string constants gives different line numbers than the
reference implementation because the string length constraint is checked after the entire
string has been lexed.